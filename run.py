import numpy as np
# import matplotlib.pyplot as plt
import os
import sys
import logging
import configs
from wae import WAE
import utils
import tensorflow as tf
import setdata



def main():
    
    # dataset = 'shuffle_mnist'
    dataset = 'disjoint_mnist'
    # dataset = 'cifar_10'
    # Load configs
    opts = configs.config_mnist
    # opts = configs.config_cifar
    task_num = opts['task_num']
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
    # Load data
    data = setdata.set_data(dataset, task_num)
    logging.error(opts)
    # print (data[0].data.shape)
    # print (data[0].labels.shape)
    # print (data[0].labels[:5])
    # print (data[1].labels[:5])
    # print (data[0].test_labels[:5])
    # print (data[1].test_labels[:5])
    # print (data[0].test_data.shape)
    # print (data[0].test_labels.shape)
    # print (data[0].data_shape)

    
    # images = []
    # for i in range(3):
    #     img = np.reshape(data[i].data[:10], (10, 28, 28))
    #     images.append(np.concatenate(img, axis = 1))
    # img = np.concatenate([images[0], images[1], images[2]], axis = 0)
    # plt.imshow(img, cmap='Greys_r',interpolation='none', vmin=0., vmax=1)
    # plt.savefig("dataset_1.jpg")

    # tf.set_random_seed(1233)
        
    with tf.Session(config=tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))) as sess:
        
        # Initialize model
        wae = WAE(opts, sess)
        # Initialize variables
        sess.run(wae.init)
        logging.error(tf.trainable_variables())
        logging.error(len(tf.trainable_variables()))
        # logging.error(wae.t_network_vars)
        
        # Initialize/Set former parameters as zeros
        random_z, pseudo_G_z, pseudo_T_z, w_old, b_old, f_g_z, pred = wae.former_init()

        for i in range(len(data)):
            if i == 0:
                # Consider no trans loss and regularization loss in Task 0
                lambda_list = {'wae_lambda': 1,
                               'rec_lambda': 0.1,
                               'trans_lambda': 0.0,
                               'reg_lambda': 0.0,
                               'f_lambda': 0.0,
                               'main_lambda': 1.0}
                logging.error("task " + str(i) + ":")
                logging.error(lambda_list)
                wae.train(data, i, random_z, pseudo_G_z, pseudo_T_z, w_old, b_old, f_g_z, pred, lambda_list)
                wae.test(data, True)
                
                # Update/Save former parameters
                random_z, pseudo_G_z, pseudo_T_z, w_old, b_old, f_g_z, pred = wae.former()
                print(type(random_z))
                print(type(pseudo_G_z))
                print(type(pseudo_T_z[-1]))
                print(pseudo_G_z.shape)
                
                # Print images generated by random z
                # idx = np.random.choice(400, 20, replace=False)
                # img_gen = np.reshape(pseudo_G_z[idx], (20, 28, 28))
                # img_gen = np.concatenate(img_gen, axis = 1)
                # plt.imshow(img_gen, cmap='Greys_r',interpolation='none', vmin=0., vmax=1)
                # plt.savefig("img_gen_after_task_%d_0.jpg" % i)
                # break
                
            else:
                lambda_list = {'wae_lambda': 1.0,
                               'rec_lambda': 0.5 * opts['task_num'],
                               'trans_lambda': 0.01 * opts['task_num'],
                               'reg_lambda': 0.01,
                               'f_lambda': 1.0,
                               'main_lambda': 1.0}
                logging.error("task " + str(i) + ":")
                logging.error(lambda_list)
                wae.train(data, i, random_z, pseudo_G_z, pseudo_T_z, w_old, b_old, f_g_z, pred, lambda_list)
                wae.test(data, True)
                
                random_z, pseudo_G_z, pseudo_T_z, w_old, b_old, f_g_z, pred = wae.former()
                
                # '''
                # img_gen = np.reshape(pseudo_G_z[:10], (10, 28, 28))
                # img_gen = np.concatenate(img_gen, axis = 1)
                # plt.imshow(img_gen, cmap='Greys_r',interpolation='none', vmin=0., vmax=1)
                # plt.savefig("img_gen_after_task_%d.jpg" % i)
                # '''

main()
